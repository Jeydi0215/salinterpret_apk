name: Build APK
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      
      - name: Build APK in Docker
        run: |
          # Create directory for the output
          mkdir -p ~/apk_output
          
          # Run the Kivy Docker container to build the APK
          docker run --rm -v ${{ github.workspace }}:/app -v ~/apk_output:/output kivy/python-for-android bash -c "
            cd /app
            python -m pip install --upgrade pip buildozer cython
            
            # Find and use the right directory
            if [ -f 'main.py' ]; then
              WORK_DIR=.
            elif [ -f 'salinterpret/main.py' ]; then
              WORK_DIR=salinterpret
            else
              echo 'Cannot find main.py!'
              exit 1
            fi
            
            cd \$WORK_DIR
            
            # Create or update buildozer.spec
            if [ ! -f 'buildozer.spec' ]; then
              echo 'Creating buildozer.spec'
              echo '[app]' > buildozer.spec
              echo 'title = ASL Translator' >> buildozer.spec
              echo 'package.name = asltranslator' >> buildozer.spec
              echo 'package.domain = org.salinterpret' >> buildozer.spec
              echo 'source.dir = .' >> buildozer.spec
              echo 'source.include_exts = py,png,jpg,kv,atlas' >> buildozer.spec
              echo 'version = 1.0' >> buildozer.spec
              echo 'requirements = python3,kivy==2.1.0,pillow,numpy,opencv-python-headless<4.3,requests' >> buildozer.spec
              echo 'orientation = portrait' >> buildozer.spec
              echo 'fullscreen = 0' >> buildozer.spec
              echo 'android.permissions = CAMERA,INTERNET' >> buildozer.spec
              echo 'android.arch = arm64-v8a' >> buildozer.spec
              echo 'android.allow_backup = True' >> buildozer.spec
              echo 'android.api = 31' >> buildozer.spec
              echo 'android.minapi = 21' >> buildozer.spec
              echo 'android.ndk = 23b' >> buildozer.spec
              echo 'android.sdk = 31' >> buildozer.spec
              echo 'android.debug = False' >> buildozer.spec
            else
              # Update the requirements
              sed -i 's/requirements = .*/requirements = python3,kivy==2.1.0,pillow,numpy,opencv-python-headless<4.3,requests/' buildozer.spec
            fi
            
            # Build the APK with verbose output
            buildozer -v android debug
            
            # Copy the APK to the output volume
            find . -name '*.apk' -exec cp {} /output/ \\;
          "
          
          # List APKs in the output directory
          ls -la ~/apk_output
          
          # Copy the APK back to the workspace
          cp ~/apk_output/*.apk ${{ github.workspace }}/ || echo "No APK found in output directory"
      
      - name: List APKs
        run: |
          find ${{ github.workspace }} -name "*.apk"
      
      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
          APK_PATH=$(find ${{ github.workspace }} -name "*.apk" | head -n 1)
          if [ -n "$APK_PATH" ]; then
            echo "APK found at: $APK_PATH"
            
            # Create release with found APK
            gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            
            # Create a tag based on timestamp
            TAG_NAME="v-$(date +%Y%m%d%H%M%S)"
            
            # Create new release
            gh release create "$TAG_NAME" "$APK_PATH" --title "ASL Translator APK" --notes "Built with GitHub Actions"
            
            echo "Release created successfully with tag: $TAG_NAME"
          else
            echo "No APK file was found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
