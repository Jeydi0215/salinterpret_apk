name: Build APK
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            build-essential \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            libtool \
            libtool-bin \
            autoconf \
            automake \
            pkg-config
          
          pip install --upgrade pip
          pip install buildozer==1.5.0 Cython==0.29.33
      
      - name: Prepare project
        run: |
          echo "Preparing project structure..."
          mkdir -p myapp
          
          # Copy main.py and other files to myapp directory
          if [ -f "main.py" ]; then
            cp main.py myapp/
            cp -r *.py myapp/ || true
            cp -r assets myapp/ || true
          elif [ -f "salinterpret/main.py" ]; then
            cp salinterpret/main.py myapp/
            cp -r salinterpret/*.py myapp/ || true
            cp -r salinterpret/assets myapp/ || true
          else
            find . -type f -name "*.py" | head -5
            echo "Could not locate main.py file!"
            exit 1
          fi
          
          # Create a minimal buildozer.spec file
          cd myapp
          echo '[app]' > buildozer.spec
          echo 'title = ASL Translator' >> buildozer.spec
          echo 'package.name = asltranslator' >> buildozer.spec
          echo 'package.domain = org.test' >> buildozer.spec
          echo 'source.dir = .' >> buildozer.spec
          echo 'source.include_exts = py,png,jpg,kv,atlas' >> buildozer.spec
          echo 'version = 0.1' >> buildozer.spec
          echo 'requirements = python3,kivy==2.1.0,pillow,numpy,opencv-python-headless<4.3,requests' >> buildozer.spec
          echo 'orientation = portrait' >> buildozer.spec
          echo 'fullscreen = 0' >> buildozer.spec
          echo 'android.archs = arm64-v8a' >> buildozer.spec
          echo 'android.allow_backup = True' >> buildozer.spec
          echo 'android.permissions = CAMERA,INTERNET' >> buildozer.spec
          echo 'android.api = 31' >> buildozer.spec
          echo 'android.minapi = 21' >> buildozer.spec
          # Instead of downloading NDK, use the system's pre-installed NDK
          echo 'android.ndk_path = /usr/local/lib/android/sdk/ndk/27.2.12479018' >> buildozer.spec
          echo 'android.accept_sdk_license = True' >> buildozer.spec
          echo 'p4a.bootstrap = sdl2' >> buildozer.spec
          echo 'log_level = 2' >> buildozer.spec
      
      - name: Build APK
        run: |
          cd myapp
          
          # Environment variables for NDK
          export ANDROIDAPI=31
          export ANDROIDMINAPI=21
          export NDKAPI=21
          
          # Setting special env vars for P4A
          export APP_ANDROID_NATIVE_API=31
          export APP_ANDROID_MIN_API=21
          export USE_SDK_WRAPPER=1
          export P4A_DEBUG_OUTPUT=1
          
          # Clean any previous build attempts
          buildozer android clean
          
          # Run buildozer with explicit NDK path by forcing it from the env
          echo "Building with Android NDK from $(which ndk-build || echo 'NDK not found')"
          export PATH=${ANDROID_NDK_HOME}:${PATH}
          export ANDROIDNDK=${ANDROID_NDK_HOME}
          
          # Show debug info
          buildozer android p4a -- --debug info
          
          # Build with verbose output
          buildozer -v android debug
          
          # If build fails, show detailed logs
          if [ $? -ne 0 ]; then
            echo "Build failed, showing detailed logs:"
            cat .buildozer/logs/buildozer.log || true
            echo "--- Python for Android logs ---"
            find .buildozer -name "build.log" -exec tail -n 200 {} \;
            echo "--- SDK/NDK info ---"
            ls -la /usr/local/lib/android/sdk/ndk
          fi
          
          # Find and display the APK path
          find . -name "*.apk"
      
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: asl-translator-apk
          path: myapp/bin/*.apk
          if-no-files-found: error
      
      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
          cd myapp
          APK_PATH=$(find bin -name "*.apk" | head -n 1)
          if [ -n "$APK_PATH" ]; then
            echo "APK found at: $APK_PATH"
            
            # Create release with found APK
            gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            
            # Create a tag based on timestamp
            TAG_NAME="v-$(date +%Y%m%d%H%M%S)"
            
            # Create new release
            gh release create "$TAG_NAME" "$APK_PATH" --title "ASL Translator APK" --notes "Built with GitHub Actions"
            
            echo "Release created successfully with tag: $TAG_NAME"
          else
            echo "No APK file was found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
