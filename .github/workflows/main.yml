name: Build APK
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            build-essential \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            libtool \
            libtool-bin \
            autoconf \
            automake \
            pkg-config
          
          pip install --upgrade pip
          pip install buildozer==1.5.0 Cython==0.29.33

      - name: Download NDK 25b
        run: |
          mkdir -p /home/runner/.buildozer/android/platform
          wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O ndk.zip
          unzip -q ndk.zip -d /home/runner/.buildozer/android/platform/
          mv /home/runner/.buildozer/android/platform/android-ndk-r25b /home/runner/.buildozer/android/platform/android-ndk

      - name: Prepare project
        run: |
          echo "Preparing project structure..."
          mkdir -p myapp
          
          # Create a simple main.py file
          cat > myapp/main.py << 'EOF'
import kivy
from kivy.app import App
from kivy.uix.label import Label

class ASLTranslatorApp(App):
    def build(self):
        return Label(text="ASL Translator")

if __name__ == "__main__":
    ASLTranslatorApp().run()
EOF
          
          # Create a minimal buildozer.spec file
          cd myapp
          cat > buildozer.spec << 'EOF'
[app]
title = ASL Translator
package.name = asltranslator
package.domain = org.test
source.dir = .
source.include_exts = py,png,jpg,kv,atlas
version = 0.1
requirements = python3,kivy==2.1.0,pillow
orientation = portrait
fullscreen = 0

# Android specific
android.archs = arm64-v8a
android.allow_backup = True
android.permissions = CAMERA,INTERNET
android.api = 31
android.minapi = 21
android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk
android.sdk_path = /home/runner/.buildozer/android/platform/android-sdk
android.accept_sdk_license = True

# (str) Android NDK version to use
android.ndk_api = 21

# (str) Bootstrap to use for android builds
p4a.bootstrap = sdl2

# Kivy version
p4a.kivy_version = 2.1.0

# Log level for p4a
log_level = 2
EOF
      
      - name: Build APK
        run: |
          cd myapp
          
          # Environment variables
          export ANDROIDSDK=/home/runner/.buildozer/android/platform/android-sdk
          export ANDROIDNDK=/home/runner/.buildozer/android/platform/android-ndk
          export ANDROIDAPI=31
          export ANDROIDMINAPI=21
          export PATH=$ANDROIDNDK:$PATH
          
          # Show configuration
          echo "Using Android NDK at: $ANDROIDNDK"
          ls -la $ANDROIDNDK || echo "NDK directory not found"
          
          # Build APK
          buildozer -v android debug
          
          # If build fails, show logs
          if [ $? -ne 0 ]; then
            echo "Build failed, showing logs:"
            cat .buildozer/logs/buildozer.log || true
            echo "--- Python for Android logs ---"
            find .buildozer -name "build.log" -exec tail -n 200 {} \; || true
          fi
          
          # Find APK
          find . -name "*.apk"
      
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: asl-translator-apk
          path: myapp/bin/*.apk
          if-no-files-found: error
      
      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
          cd myapp
          APK_PATH=$(find bin -name "*.apk" | head -n 1)
          if [ -n "$APK_PATH" ]; then
            echo "APK found at: $APK_PATH"
            
            # Create release with found APK
            gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            
            # Create a tag based on timestamp
            TAG_NAME="v-$(date +%Y%m%d%H%M%S)"
            
            # Create new release
            gh release create "$TAG_NAME" "$APK_PATH" --title "ASL Translator APK" --notes "Built with GitHub Actions"
            
            echo "Release created successfully with tag: $TAG_NAME"
          else
            echo "No APK file was found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
