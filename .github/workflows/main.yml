name: Build ASL Translator APK
on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true
        
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Cache Buildozer dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            .buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('salinterpret/buildozer.spec') }}
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
          
      - name: Install build dependencies
        run: |
          pip install --upgrade Cython==0.29.33 virtualenv buildozer==1.5.0
          
      - name: Build APK with Buildozer
        run: |
          # Move to the directory containing buildozer.spec
          cd salinterpret
          
          # Set environment variables for NDK/SDK
          export PATH=$PATH:~/.buildozer/android/platform/android-sdk/tools/bin
          export ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk
          
          # Clean any previous builds
          buildozer clean
          
          # Build the APK
          buildozer android debug
          
          # List files to verify APK was created
          ls -la bin/ || echo "bin directory may not exist yet"
        
      - name: List and Store APK
        if: success()
        run: |
          mkdir -p artifacts
          find salinterpret/bin -name "*.apk" -exec cp {} artifacts/ \;
          ls -la artifacts/
          
      # Using GitHub CLI for release creation instead of actions
      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
          # Check if release exists and delete it
          gh release delete latest --yes || echo "Release does not exist yet"
          
          # Create new release with any APKs found
          if [ "$(find artifacts -name '*.apk' | wc -l)" -gt 0 ]; then
            gh release create latest artifacts/*.apk --title "Latest Build" --notes "Automated build from GitHub Actions" --prerelease
          else
            echo "No APK files found to release"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
