name: Build APK
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # Updated to JDK 17
      
      - name: Install Android SDK
        run: |
          # Install Android SDK
          sudo apt-get update
          sudo apt-get install -y wget unzip
          
          # Define SDK location
          export ANDROID_HOME=$HOME/android-sdk
          mkdir -p $ANDROID_HOME
          cd $ANDROID_HOME
          
          # Download commandlinetools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          
          # Unzip directly to the correct location with the right structure
          mkdir -p $ANDROID_HOME/cmdline-tools
          unzip -q commandlinetools-linux-10406996_latest.zip -d $ANDROID_HOME/tmp
          mv $ANDROID_HOME/tmp/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm -rf $ANDROID_HOME/tmp
          rm commandlinetools-linux-10406996_latest.zip
          
          # Verify directory structure
          ls -la $ANDROID_HOME/cmdline-tools/latest/bin || echo "Directory structure incorrect"
          
          # Set up environment variables
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Install required packages
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "platforms;android-31" "build-tools;33.0.0" "ndk;23.1.7779620"
          
          # Add SDK location to environment
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
          echo "JAVA_HOME=$(readlink -f /usr/bin/javac | sed 's:/bin/javac::')" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            build-essential \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good
          
          pip install --upgrade pip
          pip install buildozer==1.5.0 Cython==0.29.33
      
      - name: Prepare project
        run: |
          echo "Preparing project structure..."
          mkdir -p myapp
          
          # Copy main.py and other files to myapp directory
          if [ -f "main.py" ]; then
            cp main.py myapp/
            cp -r *.py myapp/ || true
            cp -r assets myapp/ || true
          elif [ -f "salinterpret/main.py" ]; then
            cp salinterpret/main.py myapp/
            cp -r salinterpret/*.py myapp/ || true
            cp -r salinterpret/assets myapp/ || true
          else
            find . -type f -name "*.py" | head -5
            echo "Could not locate main.py file!"
            exit 1
          fi
          
          # Create a minimal buildozer.spec file
          cd myapp
          echo '[app]' > buildozer.spec
          echo 'title = ASL Translator' >> buildozer.spec
          echo 'package.name = asltranslator' >> buildozer.spec
          echo 'package.domain = org.test' >> buildozer.spec
          echo 'source.dir = .' >> buildozer.spec
          echo 'source.include_exts = py,png,jpg,kv,atlas' >> buildozer.spec
          echo 'version = 0.1' >> buildozer.spec
          echo 'requirements = python3,kivy==2.1.0,pillow,numpy,opencv-python-headless<4.3,requests' >> buildozer.spec
          echo 'orientation = portrait' >> buildozer.spec
          echo 'fullscreen = 0' >> buildozer.spec
          echo 'android.archs = arm64-v8a' >> buildozer.spec
          echo 'android.allow_backup = True' >> buildozer.spec
          echo 'android.permissions = CAMERA,INTERNET' >> buildozer.spec
          echo 'android.api = 31' >> buildozer.spec
          echo 'android.minapi = 21' >> buildozer.spec
          echo 'android.ndk = 23.1.7779620' >> buildozer.spec
          echo "android.sdk_path = $ANDROID_HOME" >> buildozer.spec
          echo "android.accept_sdk_license = True" >> buildozer.spec
          echo 'p4a.bootstrap = sdl2' >> buildozer.spec
          echo 'android.skip_update = True' >> buildozer.spec
      
      - name: Build APK
        run: |
          cd myapp
          
          # Set environment variables
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Build with verbose output for debugging
          buildozer -v android debug
          
          # Find the APK
          find . -name "*.apk"
      
      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
          cd myapp  # Make sure we're in the right directory
          APK_PATH=$(find . -name "*.apk" | head -n 1)
          if [ -n "$APK_PATH" ]; then
            echo "APK found at: $APK_PATH"
            
            # Create release with found APK
            gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            
            # Create a tag based on timestamp
            TAG_NAME="v-$(date +%Y%m%d%H%M%S)"
            
            # Create new release
            gh release create "$TAG_NAME" "$APK_PATH" --title "ASL Translator APK" --notes "Built with GitHub Actions"
            
            echo "Release created successfully with tag: $TAG_NAME"
          else
            echo "No APK file was found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
